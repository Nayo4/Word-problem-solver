# -*- coding: utf-8 -*-
"""PintTest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R06mZltvJ5xyWbMkMZY3eaQGRLc0pEwu
"""

!pip install spacy
!pip install scikit-learn==0.22.2.post1
!pip install spacy-transformers==0.5.1
!pip install pint
!python -m spacy download en_trf_bertbaseuncased_lg
!python -m textblob.download_corpora
import spacy
import torch
import pint



import nltk

nltk.download('wordnet')
nltk.download('stopwords')
nltk.download('punkt')

from pint import UnitRegistry
from nltk.stem import WordNetLemmatizer
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from textblob import TextBlob

ureg = UnitRegistry()

def find_missing(elements):
   idx = 0
   tofind = ' '
   for i in range(len(elements)):
      if not elements[i].isnumeric():
         idx = i
         tofind = elements[i]
         break
   if idx == 2:
      return int(elements[1]) / int(elements[0])
   elif idx == 1:
      return int(elements[2]) * int(elements[0])
   elif idx == 0:
      return int(elements[1]) / int(elements[2])

phrase = " If Ben was able to travel 5 km in 3 hours in his car. what was the speed of the car?"

def Process(phrase):
  stop_words = stopwords.words('english')



  words = word_tokenize(phrase)
  stripped_phrase = []
  for word in words:
    if word not in stop_words:
      stripped_phrase.append(word)

  listToStr = ' '.join([str(elem) for elem in stripped_phrase])

  tb_phrase = TextBlob(listToStr)
  a = tb_phrase.tags


  speed = 0
  time = 0
  distance = 0
  i= 1
  for word in a:

    if i == len(a)+1:
      break


    # print(a[i][1])
    if word[1] == "CD":

      value = int(word[0])
      unit = (a[i][0])
      decide = int(value) * ureg(unit)

      if decide.dimensionality == '[length] / [time]' or decide.dimensionality == '[time] / [length] / [mass]':
        speed = decide
      elif decide.dimensionality == '[length]':
        distance = decide
        distance = (distance.to(ureg.kilometer))
      elif decide.dimensionality == '[time]':
        time = decide
        time = (time.to(ureg.hour))

    i = i+1



  try : d= str(int(distance.magnitude))
  except:
    d="empty"
    ext= "km"


  try : s= str(int(speed.magnitude))
  except:
    s="empty"
    ext = "kmph"


  try : t= str(int(time.magnitude))
  except:
    t="empty"
    ext= "hours"



  stringtest = [str(s),str(d),str(t)]
  print(stringtest[2])

  return str((find_missing(stringtest))) +" "+ext

Process(phrase)

'cmph' in ureg

#[length] / [time]
#[length]
#[time]

mag1 = '20'
mag = int(mag1)
mag2 = 'mph'
ureg = UnitRegistry()

distance = mag * ureg(mag2)

print(distance)
distance = (distance.to(ureg.kmph))
print(distance)